unit controllers.mc_datahora;

interface

uses
  Horse, System.Generics.Collections, JOSE.Core.jwt, jose.core.Builder,
  System.DateUtils, System.JSON;

procedure registry(identit: Integer);

procedure consulta_dataHr(Req: THorseRequest; Res: THorseResponse; Next: TProc);

implementation

uses
  System.SysUtils, services.produto, Horse.Commons, Horse.JWT, MyClaims, UUtils,
  services.auth, services.config_server, UCONFIGSERVER, Horse.RateLimit,
  System.Classes, Vcl.ExtCtrls, UVerificaPdv, Horse.GBSwagger, UConstApp,
  Data.SqlTimSt, valida.headers.requisicao;

type
  TDateHora = class
  private
    fdataHora: string;
  public
    property dataHora: string read fdataHora write fdataHora;

  end;

  TAPIError = class
  private
    Ferror: string;

  public
    property error: string read Ferror write Ferror;
  end;

  TTooMany = class
  private
    Ferror: string;

  public
    property mensagem: string read Ferror write Ferror;
  end;

var
  LConfServer: TJSONArray;


procedure registry(identit: Integer);
begin

  THorse.get('/mcdatahora', consulta_dataHr);
end; //, THorseRateLimit.New(Config)

procedure consulta_dataHr(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
  resposta: string;
begin
  if (LConfServer = nil) or (LConfServer.Count = 0) then
  begin
    Res.Send(TJSONArray.Create(TJSONObject.Create(TJSONPair.Create('error', 'Servidor sem configuração !')))).Status(THTTPStatus.InternalServerError);
  end
  else
  begin

    resposta := '|' + FormatDateTime('dd/mm/yyyy hh:nn:ss', Now) + '|';
    Res.Send(TJSONArray.Create(TJSONObject.Create(TJSONPair.Create('hs', resposta))));

  end;
end;

end.

